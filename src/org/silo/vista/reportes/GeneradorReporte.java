/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.silo.vista.reportes;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.silo.utils.pdf.PDFHelper;

/**
 *
 * @author VREBO
 */
public abstract class GeneradorReporte extends javax.swing.JPanel {

    /**
     * Creates new form GeneradorReporte
     */
    private JPanel leftPanel;
    private PanelPDF rightPanel;
    private String urlUltimoReporte;

    public GeneradorReporte() {
        initComponents();
    }

    public GeneradorReporte(JPanel leftPanel, String reporteDefault) {
        this.leftPanel = leftPanel;
        this.urlUltimoReporte = reporteDefault;
        this.rightPanel = new PanelPDF(reporteDefault);
        initComponents();
        _initComponents();
        installListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        generadorToolBar1 = new org.silo.vista.componentes.GeneradorToolBar();
        jPanel2 = new javax.swing.JPanel();
        reporteToolBar2 = new org.silo.vista.componentes.ReporteToolBar();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);

        jPanel1.setLayout(new java.awt.BorderLayout());

        generadorToolBar1.setRollover(true);
        jPanel1.add(generadorToolBar1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        reporteToolBar2.setRollover(true);
        jPanel2.add(reporteToolBar2, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.silo.vista.componentes.GeneradorToolBar generadorToolBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private org.silo.vista.componentes.ReporteToolBar reporteToolBar2;
    // End of variables declaration//GEN-END:variables

    private void _initComponents() {
        jPanel1.add(leftPanel, "Center");
        jPanel2.add(rightPanel, "Center");
    }

    private void actualizaPDF() {
        jPanel2.remove(rightPanel);
        rightPanel = new PanelPDF(urlUltimoReporte);
        jPanel2.add(rightPanel, "Center");
        getParent().repaint();
    }

    private void installListeners() {
        generadorToolBar1.getCreateReport().addActionListener((ActionEvent e) -> {
            String nombre = ((PanelGenerador) leftPanel).getNombreReporte();
            System.out.println(nombre);
            PDFHelper pdfHelper = new PDFHelper();
            switch (nombre) {
                case "reporte-clientes":
                    Date[] intervalo = ((PanelClientes) leftPanel).getData();
                    pdfHelper.generarReporteRegistroMensualClientes(intervalo[0], intervalo[1]);
                    urlUltimoReporte = pdfHelper.getRuta();
                    actualizaPDF();
                    break;
                case "reporte-empleado":
                    Object[] datosReporte = ((PanelEmpleados) leftPanel).getData();
                    boolean agrupar = (boolean) datosReporte[0];
                    Date[] intervalo1 = (Date[]) datosReporte[1];
                    System.out.println(agrupar);
                    if (agrupar) {
                        pdfHelper.generarReporteEmpleadosMensualEstado(intervalo1[0], intervalo1[1]);
                    } else {
                        pdfHelper.generarReporteRegistroMensualEmpleados(intervalo1[0], intervalo1[1]);
                    }
                    urlUltimoReporte = pdfHelper.getRuta();
                    actualizaPDF();
                    break;
                case "reporte-peliculas":
                    String reporte = ((PanelPeliculas) leftPanel).getData();
                    System.out.println(reporte);
                    boolean result = false;
                    switch (reporte) {
                        case "reporte-anio":
                            result = pdfHelper.generarReportePeliculasInventarioAnio();
                            break;
                        case "reporte-clasificacion":
                            result = pdfHelper.generarReportePeliculasInventarioClasificacion();
                            break;
                        case "reporte-genero":
                            result = pdfHelper.generarReportePeliculasInventarioGenero();
                            break;
                    }
                    if (result) {
                        urlUltimoReporte = pdfHelper.getRuta();
                        actualizaPDF();
                    }
                    break;
                case "reporte-copias":
                    if (pdfHelper.generaReporteCopiasEstado()) {
                        urlUltimoReporte = pdfHelper.getRuta();
                        actualizaPDF();
                    }
                    break;
                case "reporte-ventas":
                    datosReporte = ((PanelVentas) leftPanel).getData();
                    agrupar = (boolean) datosReporte[0];
                    System.out.println(agrupar);
                    intervalo = (Date[]) datosReporte[1];
                    if (agrupar) {
                        pdfHelper.generarReporteMensualVentasEmpleado(intervalo[0], intervalo[1]);
                    } else {
                        pdfHelper.generarReporteMensualVentas(intervalo[0], intervalo[1]);
                    }
                    urlUltimoReporte = pdfHelper.getRuta();
                    actualizaPDF();
                    break;
            }
        });
        generadorToolBar1.getSaveReport().addActionListener((ActionEvent e) -> {
            JFileChooser jf = new JFileChooser();
            int opcion = jf.showSaveDialog(null);
            if (opcion == JFileChooser.APPROVE_OPTION) {
                try {
                    File origen = new File(urlUltimoReporte);
                    File destino = new File(jf.getSelectedFile().getAbsolutePath() + ".pdf");
                    Files.copy(origen.toPath(), destino.toPath(), StandardCopyOption.REPLACE_EXISTING);
                } catch (IOException ex) {
                    Logger.getLogger(GeneradorReporte.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        reporteToolBar2.getBefore().addActionListener((ActionEvent e) -> {
            rightPanel.paginaAnterior();
        });
        reporteToolBar2.getNext().addActionListener((ActionEvent e) -> {
            rightPanel.paginaSiguiente();
        });
        reporteToolBar2.getDefaultZoom().addActionListener((ActionEvent e) -> {
            rightPanel.restauraZoom();
        });
    }
}
